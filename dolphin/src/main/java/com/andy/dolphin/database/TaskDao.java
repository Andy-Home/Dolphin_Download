package com.andy.dolphin.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.andy.dolphin.task.Task;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "TASK".
 */
public class TaskDao extends AbstractDao<Task, Long> {

    public static final String TABLENAME = "TASK";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Key = new Property(1, String.class, "key", false, "KEY");
        public final static Property Status = new Property(2, int.class, "status", false, "STATUS");
        public final static Property Url = new Property(3, String.class, "url", false, "URL");
        public final static Property FileName = new Property(4, String.class, "fileName", false, "FILE_NAME");
        public final static Property FileLength = new Property(5, int.class, "fileLength", false, "FILE_LENGTH");
        public final static Property Percent = new Property(6, float.class, "percent", false, "PERCENT");
    }


    public TaskDao(DaoConfig config) {
        super(config);
    }

    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"KEY\" TEXT NOT NULL ," + // 1: key
                "\"STATUS\" INTEGER NOT NULL ," + // 2: status
                "\"URL\" TEXT NOT NULL ," + // 3: url
                "\"FILE_NAME\" TEXT," + // 4: fileName
                "\"FILE_LENGTH\" INTEGER NOT NULL ," + // 5: fileLength
                "\"PERCENT\" REAL NOT NULL );"); // 6: percent
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_TASK_KEY ON \"TASK\"" +
                " (\"KEY\" ASC);");
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Task entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getKey());
        stmt.bindLong(3, entity.getStatus());
        stmt.bindString(4, entity.getUrl());

        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(5, fileName);
        }
        stmt.bindLong(6, entity.getFileLength());
        stmt.bindDouble(7, entity.getPercent());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getKey());
        stmt.bindLong(3, entity.getStatus());
        stmt.bindString(4, entity.getUrl());

        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(5, fileName);
        }
        stmt.bindLong(6, entity.getFileLength());
        stmt.bindDouble(7, entity.getPercent());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }

    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
                cursor.getLong(offset + 0), // id
                cursor.getString(offset + 1), // key
                cursor.getInt(offset + 2), // status
                cursor.getString(offset + 3), // url
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fileName
                cursor.getInt(offset + 5), // fileLength
                cursor.getFloat(offset + 6) // percent
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setKey(cursor.getString(offset + 1));
        entity.setStatus(cursor.getInt(offset + 2));
        entity.setUrl(cursor.getString(offset + 3));
        entity.setFileName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFileLength(cursor.getInt(offset + 5));
        entity.setPercent(cursor.getFloat(offset + 6));
    }

    @Override
    protected final Long updateKeyAfterInsert(Task entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(Task entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Task entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
